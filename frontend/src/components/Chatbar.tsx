import React, { useState } from 'react'
import MicIcon from '@mui/icons-material/Mic'
import SendIcon from '@mui/icons-material/Send'
import chatService from '../services/chat/ChatService'

interface ChatbarProps {
	philosopherId?: string;
	onNewMessage?: (message: { role: 'user' | 'assistant'; content: string; timestamp: string }) => void;
}

const Chatbar: React.FC<ChatbarProps> = ({ philosopherId, onNewMessage }) => {
	const [inputValue, setInputValue] = useState('');
	const [isLoading, setIsLoading] = useState(false);

	const handleSendMessage = async () => {
		if (!inputValue.trim() || isLoading) return;

		const userMessage = {
			role: 'user' as const,
			content: inputValue,
			timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
		};

		// Add user message to chat
		onNewMessage?.(userMessage);

		// Clear input and set loading
		setInputValue('');
		setIsLoading(true);

		try {
			// Send request to backend
			const response = await chatService.promptAI({
				prompt: inputValue,
				advisor_name: philosopherId || 'plato',
				chat_id: undefined, // Will be generated by backend
				history: undefined // For now, no history
			});

			// Extract the AI response
			if (response && response.length > 0) {
				const chatData = response[0];
				if (chatData.content && Array.isArray(chatData.content)) {
					const lastMessage = chatData.content[chatData.content.length - 1];
					
					if (lastMessage && lastMessage.role === 'assistant') {
						const assistantMessage = {
							role: 'assistant' as const,
							content: lastMessage.content,
							timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
						};
						onNewMessage?.(assistantMessage);
					}
				}
			}
		} catch (error) {
			console.error('Error sending message:', error);
			// You could add error handling here, like showing a toast
		} finally {
			setIsLoading(false);
		}
	};

	const handleKeyPress = (e: React.KeyboardEvent) => {
		if (e.key === 'Enter' && !e.shiftKey) {
			e.preventDefault();
			handleSendMessage();
		}
	};

	return (
		<div className="flex flex-col items-center w-full gap-4">
			{/* Main Chat Input Area */}
			<div className="flex flex-row items-center justify-center w-full max-w-2xl gap-2">
				{/* Text Input Field */}
				<div className="flex-1 relative">
					<input
						type="text"
						value={inputValue}
						onChange={(e) => setInputValue(e.target.value)}
						onKeyPress={handleKeyPress}
						placeholder="Share your thoughts with the philosopher..."
						className="w-full px-4 py-3 bg-white border border-gray-300 rounded-2xl outline-none text-gray-700 placeholder-gray-500 text-sm shadow-md"
						disabled={isLoading}
					/>
				</div>
				
				{/* Microphone Button */}
				<button 
					className="w-12 h-12 text-gray-700 bg-white border border-gray-300 rounded-xl flex items-center justify-center 
					hover:bg-black hover:text-white hover:shadow-md hover:shadow-gray-700 hover:border-black transition-colors shadow-md disabled:opacity-50"
					disabled={isLoading}
				>
					<MicIcon sx={{ fontSize: 20 }} />
				</button>
				
				{/* Send Button */}
				<button 
					onClick={handleSendMessage}
					disabled={isLoading || !inputValue.trim()}
					className="w-12 h-12 text-gray-700 bg-white border border-gray-300 rounded-xl flex items-center justify-center 
					hover:bg-black hover:text-white hover:shadow-md hover:shadow-gray-700 hover:border-black transition-colors shadow-md disabled:opacity-50"
				>
					<SendIcon sx={{ fontSize: 20 }} />
				</button>
			</div>
		</div>
	)
}

export default Chatbar
